import React, { useContext, useEffect, useRef } from 'react';
import { CSSTransition as ReactCSSTransition } from 'react-transition-group';
const TransitionContext = React.createContext({
    parent: {},
});
function useIsInitialRender() {
    const isInitialRender = useRef(true);
    useEffect(() => {
        isInitialRender.current = false;
    }, []);
    return isInitialRender.current;
}
function CSSTransition({ show, nodeRef, enter = '', enterFrom = '', enterTo = '', leave = '', leaveFrom = '', leaveTo = '', appear, children, isChild, }) {
    const enterClasses = enter.split(' ').filter((s) => s.length);
    const enterFromClasses = enterFrom.split(' ').filter((s) => s.length);
    const enterToClasses = enterTo.split(' ').filter((s) => s.length);
    const leaveClasses = leave.split(' ').filter((s) => s.length);
    const leaveFromClasses = leaveFrom.split(' ').filter((s) => s.length);
    const leaveToClasses = leaveTo.split(' ').filter((s) => s.length);
    function addClasses(classes) {
        if (nodeRef.current)
            nodeRef.current.classList.add(...classes);
    }
    function removeClasses(classes) {
        if (nodeRef.current)
            nodeRef.current.classList.remove(...classes);
    }
    return (React.createElement(ReactCSSTransition, { appear: appear, unmountOnExit: true, in: show, nodeRef: nodeRef, addEndListener: (done) => {
            nodeRef.current &&
                nodeRef.current.addEventListener('transitionend', (e) => {
                    if (!isChild || e.target === nodeRef.current) {
                        done();
                    }
                    else if (isChild) {
                        e.stopPropagation();
                    }
                }, false);
        }, onEnter: () => {
            addClasses([...enterClasses, ...enterFromClasses]);
        }, onEntering: () => {
            removeClasses(enterFromClasses);
            addClasses(enterToClasses);
        }, onEntered: () => {
            removeClasses([...enterToClasses, ...enterClasses]);
        }, onExit: () => {
            addClasses([...leaveClasses, ...leaveFromClasses]);
        }, onExiting: () => {
            removeClasses(leaveFromClasses);
            addClasses(leaveToClasses);
        }, onExited: () => {
            removeClasses([...leaveToClasses, ...leaveClasses]);
        } }, children));
}
export function Transition({ show, appear, ...rest }) {
    const { parent } = useContext(TransitionContext);
    const isInitialRender = useIsInitialRender();
    const isChild = show === undefined;
    if (isChild) {
        return (React.createElement(CSSTransition, Object.assign({ appear: parent.appear || !parent.isInitialRender, show: parent.show, isChild: true }, rest)));
    }
    return (React.createElement(TransitionContext.Provider, { value: {
            parent: {
                show,
                isInitialRender,
                appear,
            },
        } },
        React.createElement(CSSTransition, Object.assign({ appear: appear, show: show }, rest))));
}
export default Transition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQWEsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsSUFBSSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBMkI3RSxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxhQUFhLENBQXFCO0lBQ2hFLE1BQU0sRUFBRSxFQUFFO0NBQ1gsQ0FBQyxDQUFDO0FBRUgsU0FBUyxrQkFBa0I7SUFDekIsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixlQUFlLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDUCxPQUFPLGVBQWUsQ0FBQyxPQUFPLENBQUM7QUFDakMsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEVBQ3JCLElBQUksRUFDSixPQUFPLEVBQ1AsS0FBSyxHQUFHLEVBQUUsRUFDVixTQUFTLEdBQUcsRUFBRSxFQUNkLE9BQU8sR0FBRyxFQUFFLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDVixTQUFTLEdBQUcsRUFBRSxFQUNkLE9BQU8sR0FBRyxFQUFFLEVBQ1osTUFBTSxFQUNOLFFBQVEsRUFDUixPQUFPLEdBQ1k7SUFDbkIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFF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